import jsPDF from 'jspdf';
import { ROIMetrics } from '@/types/roi';
import { formatCurrency, formatNumber } from './formatters';

interface ExportData {
  metrics: ROIMetrics;
  calculations: {
    totalCostSavings: number;
    totalRevenueIncrease: number;
    totalRiskReduction: number;
    totalImpact: number;
    implementationCost: number;
    roi: number;
  };
  userEmail: string;
}

export const generatePDFReport = (data: ExportData): void => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  let yPosition = 30;

  // Header
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('RapidROI by RapidClaims', pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 10;
  doc.setFontSize(14);
  doc.setFont('helvetica', 'normal');
  doc.text('AI-Powered Medical Coding ROI Analysis', pageWidth / 2, yPosition, { align: 'center' });
  
  yPosition += 20;
  doc.setFontSize(10);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, yPosition);
  doc.text(`Report for: ${data.userEmail}`, margin, yPosition + 10);
  
  yPosition += 30;

  // Executive Summary
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Executive Summary', margin, yPosition);
  
  yPosition += 15;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const summaryData = [
    ['Total Annual Impact:', formatCurrency(data.calculations.totalImpact)],
    ['Annual Revenue Claimed:', formatCurrency(data.metrics.revenueClaimed)],
    ['Implementation Investment:', formatCurrency(data.calculations.implementationCost)],
    ['Return on Investment:', `${data.calculations.roi.toFixed(1)}%`],
    ['Monthly Savings:', formatCurrency(data.calculations.totalImpact / 12)],
  ];

  summaryData.forEach(([label, value]) => {
    doc.text(label, margin, yPosition);
    doc.setFont('helvetica', 'bold');
    doc.text(value, margin + 80, yPosition);
    doc.setFont('helvetica', 'normal');
    yPosition += 10;
  });

  yPosition += 20;

  // Impact Breakdown
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Impact Breakdown', margin, yPosition);
  
  yPosition += 15;
  doc.setFontSize(12);
  doc.setFont('helvetica', 'normal');
  
  const impactData = [
    ['Cost Savings:', formatCurrency(data.calculations.totalCostSavings)],
    ['Revenue Increase:', formatCurrency(data.calculations.totalRevenueIncrease)],
    ['Risk Reduction Value:', formatCurrency(data.calculations.totalRiskReduction)],
  ];

  impactData.forEach(([label, value]) => {
    doc.text(label, margin, yPosition);
    doc.setFont('helvetica', 'bold');
    doc.text(value, margin + 80, yPosition);
    doc.setFont('helvetica', 'normal');
    yPosition += 10;
  });

  yPosition += 20;

  // Input Parameters
  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.text('Input Parameters', margin, yPosition);
  
  yPosition += 15;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  
  const inputData = [
    ['Annual Revenue Claimed:', formatCurrency(data.metrics.revenueClaimed)],
    ['Number of Coders:', formatNumber(data.metrics.numberOfCoders)],
    ['Number of Billers:', formatNumber(data.metrics.numberOfBillers)],
    ['Number of Physicians:', formatNumber(data.metrics.numberOfPhysicians)],
    ['Claims Denied %:', `${data.metrics.claimDeniedPercent}%`],
  ];

  inputData.forEach(([label, value]) => {
    doc.text(label, margin, yPosition);
    doc.text(value, margin + 70, yPosition);
    yPosition += 8;
  });

  // Footer
  yPosition = doc.internal.pageSize.height - 30;
  doc.setFontSize(10);
  doc.setFont('helvetica', 'italic');
  doc.text('This report is generated by RapidROI Calculator by RapidClaims', pageWidth / 2, yPosition, { align: 'center' });
  doc.text('For more information, visit rapidclaims.com', pageWidth / 2, yPosition + 10, { align: 'center' });

  // Save the PDF
  const fileName = `rapidroi-analysis-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};